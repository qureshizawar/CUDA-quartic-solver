language: python
python:
 - 3.6
 
dist: bionic
addons:
  apt:
    update: true
    packages:
    - cmake
    - python3-dev python3-pip python3-tk python3-lxml python3-six python3-setuptools python3-wheel
    
install:
 - pip3 install pytest
 - python3 setup.py bdist_wheel --GPU_build False
 - pip3 install ./dist/*.whl
 
script: 
 - pytest -q ./tests/tests.py

stages:
  - test
  # Only execute deployment stage on tagged commits, and from your repository
  # (e.g. not PRs). Replace with your repo name.
  - name: deploy
    #if: tag IS PRESENT AND repo = qureshizawar/CUDA-quartic-solver
    # To only build tags that look like vX.Y.Z:
    #   if: tag =~ ^v\d+\.\d+\.\d+$ AND repo = CUDA-quartic-solver

jobs:
  include:
    - os: linux
      language: shell
      name: Test on linux

    # Deploy source distribution
    - stage: deploy
      name: Deploy source distribution
      install: skip
      script: python3 setup.py sdist --GPU_build False --formats=gztar
      after_success: |
        python3 -m pip install twine
        python3 -m twine upload --skip-existing dist/*.tar.gz
    # Deploy on linux
    - stage: deploy
      name: Build and deploy Linux wheels
      env:
        #- CIBW_MANYLINUX_X86_64_IMAGE="manylinux1"
        - CIBW_BEFORE_BUILD="pip install cmake"
        - CIBW_BUILD=cp36*
      services: docker
      install:
        - python3 -m pip install cibuildwheel==1.4.1
      script: python3 -m cibuildwheel --output-dir wheelhouse
      after_success: |
        python3 -m pip install twine
        python3 -m twine upload --skip-existing wheelhouse/*.whl
    # Deploy on mac
    - stage: deploy
      name: Build and deploy macOS wheels
      env:
        - CIBW_BEFORE_BUILD="pip install cmake"
        - CIBW_BUILD=cp36*
      os: osx
      language: shell
      install: python3 -m pip install cibuildwheel==1.4.1
      script: python3 -m cibuildwheel --output-dir wheelhouse
      after_success: |
        python3 -m pip install twine
        python3 -m twine upload --skip-existing wheelhouse/*.whl
    # Deploy on windows
    #- stage: deploy
    #  name: Build and deploy Windows wheels
    #  env:
    #    - CIBW_BEFORE_BUILD="pip install cmake"
    #    - CIBW_BUILD=cp36*
    #  os: windows
    #  language: shell
    #  install: python -m pip install cibuildwheel==1.4.1
    #  script: python -m cibuildwheel --output-dir wheelhouse
    #  after_success: |
    #    python -m pip install twine
    #    python -m twine upload --skip-existing wheelhouse/*.whl

env:
  global:
    - TWINE_USERNAME=__token__